package org.kia;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class RPCClient implements AutoCloseable {
    private static final String REQUEST_QUEUE_NAME = "rpc_queue";

    private final Connection connection;
    private final Channel channel;

    public RPCClient() throws IOException, TimeoutException {
        var factory = new ConnectionFactory();
        factory.setHost("localhost");
        factory.setPassword("rmpassword");
        factory.setUsername("rmuser");
        this.connection = factory.newConnection();
        this.channel = connection.createChannel();
    }

    public static void main(String[] args) {
        try (RPCClient client = new RPCClient()) {
            for (int i = 0; i < 4; i++) {
                var response = client.call(i);
                System.out.println("Get response: " + response);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private String call(int n) throws IOException, ExecutionException, InterruptedException {
        var message = Integer.toString(n);
        final var corrId = UUID.randomUUID().toString();
        var replyQueueName = channel.queueDeclare().getQueue();
        var properies = new AMQP.BasicProperties
                .Builder()
                .correlationId(corrId)
                .replyTo(replyQueueName)
                .build();
        channel.basicPublish("", REQUEST_QUEUE_NAME, properies, message.getBytes(StandardCharsets.UTF_8));
        final CompletableFuture<String> response = new CompletableFuture<>();
//        the consumerTag generated by the server
//        String basicConsume(String queue,
//        boolean autoAck,
//        Consumer callback)
        String ctag = channel.basicConsume(replyQueueName, true, (consumerTag, delivery) -> {
            if (delivery.getProperties().getCorrelationId().equals(corrId)) {
                response.complete(new String(delivery.getBody(), "UTF-8"));
            }
        }, consumerTag -> {
        });
        var result = response.get();
        channel.basicCancel(ctag);
        return result;
    }

    @Override
    public void close() throws Exception {
        connection.close();
    }
}
